// Common iOS build settings shared between apps/libs and debug/release

// https://pewpewthespells.com/blog/xcconfig_guide.html

// Include warnings settings - for clarity we keep them in a separate file
#include "Cassette.common.warnings.xcconfig"


// ARCHITECTURES

// The name or path of the base SDK being used during the build.
// The product will be built against the headers and libraries located inside the indicated SDK.
// This path will be prepended to all search paths, and will be passed through the environment to the compiler and linker.
// Additional SDKs can be specified in the `ADDITIONAL_SDKS` setting.
SDKROOT = iphoneos

// This setting allows for better control of sharing precompiled prefix header files between projects.
// By default, Xcode assumes that the prefix header file may include header files from the build directory if the build directory is outside of the project directory.
// Xcode cannot determine this ahead of time since other projects may not have been built into the shared build directory at the time the information is needed.
PRECOMPS_INCLUDE_HEADERS_FROM_BUILT_PRODUCTS_DIR = NO

// BUILD OPTIONS

// Activating this setting indicates that the target or project should generate bitcode during compilation
// We do not generate bitcode, due to pre-built 3rd party dependencies that do not provide bitcode,
// and also due to crash reporting complications (for symbolication).
ENABLE_BITCODE = NO

// Always embed the Swift standard libraries in the target's products, even if the target does not contain any Swift code.
// For example, this should be enabled if the target is embedding other products which contain Swift,
// or if it is a test target which does not contain Swift but which is testing a product which does.
// This setting only applies to wrapped products, not to standalone binary products.
ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = NO


// DEPLOYMENT

// The build system uses the selected device to set the correct value for the `UIDeviceFamily` key it adds to the target's `Info.plist` file.
// This also drives the --target-device flag to actool, which determines the idioms selected during catalog compilation for iOS platforms.
TARGETED_DEVICE_FAMILY = 1,2

// Code will load on this and later versions of iOS.
// Framework APIs that are unavailable in earlier versions will be weak-linked; your code should check for null function pointers or specific system versions before calling newer APIs.
IPHONEOS_DEPLOYMENT_TARGET = 10.0


// PACKAGING

// If enabled, the product will be treated as defining its own module.
// This enables automatic production of LLVM module map files when appropriate, and allows the product to be imported as a module.
DEFINES_MODULE = YES

// A string that uniquely identifies the bundle. The string should be in reverse DNS format using only alphanumeric characters (`A-Z`, `a-z`, `0-9`), the dot (`.`), and the hyphen (`-`). This value is used as the `CFBundleIdentifier` in the `Info.plist` of the built bundle.
PRODUCT_BUNDLE_IDENTIFIER = com.linkedin.$(PRODUCT_NAME:rfc1034identifier)

// [Deprecated] Should be disabled
ALWAYS_SEARCH_USER_PATHS = NO

// The name, also known as the *common name*, of a valid code-signing certificate in a keychain within your keychain path.
// A missing or invalid certificate will cause a build error.
CODE_SIGN_IDENTITY[sdk=iphoneos*] = iPhone Developer

// The team ID of a development team to use for signing certificates and provisioning profiles.
DEVELOPMENT_TEAM = 57Y47U492U

// VERSIONING

// This setting defines the current version of the project.
// The value must be a integer or floating point number, such as `57` or `365.8`.
CURRENT_PROJECT_VERSION = 1

// LLVM - CODE GENERATION

// Optimize code by making more aggressive assumptions about whether pointers can point to the same objects as other pointers.
// Programs that use pointers a lot may benefit from this, but programs that don't strictly follow the ISO C rules about the type with which an object may be accessed may behave unexpectedly.
GCC_STRICT_ALIASING = YES

// In C, allocate even uninitialized global variables in the data section of the object file, rather than generating them as common blocks.
// This has the effect that if the same variable is declared (without `extern`) in two different compilations, you will get an error when you link them.
GCC_NO_COMMON_BLOCKS = YES


// LLVM - LANGUAGE

// Choose a standard or non-standard C language dialect.
GCC_C_LANGUAGE_STANDARD = gnu99

// Enabling this option will enable increased sharing of precompiled headers among targets that share the same prefix header and precompiled header directory.
// Xcode distinguishes between precompiled header (PCH) files by generating a hash value based on the command-line options to the compiler used to create the PCH.
// Enabling this option will exclude certain compiler options from that hash.
GCC_INCREASE_PRECOMPILED_HEADER_SHARING = NO

// Generates a precompiled header for the prefix header, which should reduce overall build times.
// Precompiling the prefix header will be most effective if the contents of the prefix header or any file it includes change rarely.
// If the contents of the prefix header or any file it includes change frequently, there may be a negative impact to overall build time.
GCC_PRECOMPILE_PREFIX_HEADER = NO

// Choose a standard or non-standard C++ language dialect.
CLANG_CXX_LANGUAGE_STANDARD = gnu++0x

// Choose a version of the C++ standard library to use.
CLANG_CXX_LIBRARY = libc++

// Enable C++ exception handling. Generates extra code needed to propagate exceptions.
// TODO TOOLS-179439: investigate if we should selectively set it for targets that do C++ or C++ interop only to save space
GCC_ENABLE_CPP_EXCEPTIONS = YES

// Enable generation of information about every class with virtual functions for use by the C++ runtime type identification features (`dynamic_cast` and `typeid`). If you don't use those parts of the language, you can save some space by using this flag. Note that exception handling uses the same information, but it will generate it as needed
// TODO TOOLS-179439: investigate if we should selectively set it for targets that do C++ or C++ interop only to save space
GCC_ENABLE_CPP_RTTI = YES

// Enabling this setting allows non-modular includes to be used from within framework modules.
// This is inherently unsafe, as such headers might cause duplicate definitions when used by any client that imports both the framework and the non-modular includes.
CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES = YES

// When this setting is enabled, clang will use the shared debug info available in clang modules and precompiled headers.
// This results in smaller build artifacts, faster compile times, and more complete debug info.
// This setting should only be disabled when building static libraries with debug info for distribution.
CLANG_ENABLE_MODULE_DEBUGGING = YES

// Enables the use of modules for system APIs. System headers are imported as semantic modules instead of raw headers.
// This can result in faster builds and project indexing.
CLANG_ENABLE_MODULES = YES

// Automatically link SDK frameworks that are referenced using #import or #include.
// This feature requires also enabling support for modules.
CLANG_MODULES_AUTOLINK = YES

// Whether to enable exceptions for Objective-C
GCC_ENABLE_OBJC_EXCEPTIONS = YES

// When linking a target using Objective-C code, implicitly link in Foundation (and if deploying back to an older OS) a backwards compatibility library to allow newer language features to run on an OS where the runtime support is not natively available.
// Most targets that use Objective-C should use this, although there are rare cases where a target should opt out of this behavior.
CLANG_LINK_OBJC_RUNTIME = YES

// Enable ARC
CLANG_ENABLE_OBJC_ARC = YES


// LLVM - PREPROCESSING

// Controls whether objc_msgSend calls must be cast to the appropriate function pointer type before being called.
ENABLE_STRICT_OBJC_MSGSEND = YES


// LLVM - SANITIZER

// Check for unsigned integer overflow, in addition to checks for signed integer overflow.
CLANG_UNDEFINED_BEHAVIOR_SANITIZER_INTEGER = YES

// Check for violations of nullability annotations in function calls, return statements, and assignments.
CLANG_UNDEFINED_BEHAVIOR_SANITIZER_NULLABILITY = YES


// SWIFT COMPILER

// A list of additional flags to pass to the Swift compiler.
OTHER_SWIFT_FLAGS = $(inherited) -swift-version 5

// Swift Language Version
SWIFT_VERSION = 5.0

// When enabled, all symbols are declared `private extern` unless explicitly marked to be exported.
GCC_SYMBOLS_PRIVATE_EXTERN = NO

// Emits extra code to use the routines specified in the C++ ABI for thread-safe initialization of local statics.
// You can disable this option to reduce code size slightly in code that doesn't need to be thread-safe.
// TODO TOOLS-179439: this is the default, but disabling might reduce code size. Investigate.
GCC_THREADSAFE_STATICS = YES


// ASSET CATALOG COMPILER

// Omit inapplicable resources when building for a single device.
// For example, when building for a device with a Retina display, exclude 1x resources.
ENABLE_ONLY_ACTIVE_RESOURCES = YES

// With no value, the compiler uses the default optimization.
// You can also specify `time` to optimize for speed of access or `space` to optimize for a smaller compiled asset catalogs.
ASSETCATALOG_COMPILER_OPTIMIZATION = space


// COCOAPODS

// Let's cocoapods codesign targets in parallel
// https://github.com/CocoaPods/CocoaPods/pull/6088
COCOAPODS_PARALLEL_CODE_SIGN = true
